import { app, BrowserWindow, dialog, ipcMain, clipboard, nativeTheme } from 'electron';
import path from 'node:path';
import fs from 'node:fs';
import { encoding_for_model } from 'tiktoken';

// Set the correct path for tiktoken WASM files in packaged app
if (app.isPackaged) {
  process.env.TIKTOKEN_WASM_PATH = path.join(process.resourcesPath, 'tiktoken_bg.wasm');
}

// TypeScript interfaces for better type safety
interface FilePreviewResult {
  content: string;
  tokenCount: number;
  fileCount: number;
}

interface CombineResult {
  dest: string;
}

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Helper function to deduplicate and validate file paths
function getUniqueExistingFiles(files: string[]): Set<string> {
  return new Set(
    files
      .map((file) => file.trim())
      .filter(Boolean)
      .filter((file) => fs.existsSync(file))
  );
}

// Recursively gather code files in a folder
const CODE_EXTENSIONS = new Set<string>([
  // Web Development
  'js', 'jsx', 'ts', 'tsx', 'html', 'htm', 'css', 'scss', 'sass', 'less',
  'vue', 'svelte', 'astro', 'json', 'xml', 'yaml', 'yml', 'toml',
  // Programming Languages
  'py', 'pyx', 'pyi', 'pyw', 'java', 'kt', 'kts', 'scala', 'groovy',
  'c', 'cpp', 'cc', 'cxx', 'h', 'hpp', 'hxx', 'cs', 'vb', 'fs', 'fsx',
  'go', 'rs', 'swift', 'rb', 'php', 'pl', 'pm', 'r', 'R', 'jl',
  'dart', 'elm', 'hs', 'lhs', 'ml', 'mli', 'f', 'f90', 'f95',
  // Shell & Config
  'sh', 'bash', 'zsh', 'fish', 'bat', 'cmd', 'ps1', 'psm1',
  'dockerfile', 'makefile', 'mk', 'cmake', 'gradle', 'build',
  'env', 'ini', 'conf', 'config', 'properties', 'cfg',
  // Documentation & Markup
  'md', 'markdown', 'mdx', 'rst', 'adoc', 'asciidoc', 'tex', 'txt',
  // Database & Query
  'sql', 'nosql', 'cypher', 'sparql', 'graphql', 'gql',
  // Other
  'lock', 'gitignore', 'gitattributes', 'editorconfig', 'eslintrc',
  'prettierrc', 'babelrc', 'tsconfig', 'jsconfig', 'webpack'
]);

const IGNORED_DIRS = new Set(['node_modules', '.git', '.next', 'dist', 'build', 'out', '.cache', 'coverage', '.nyc_output', 'tmp', 'temp']);

function walkDir(dir: string): string[] {
  try {
    const entries = fs.readdirSync(dir, { withFileTypes: true });

    return entries.flatMap((entry) => {
      const fullPath = path.join(dir, entry.name);

      if (entry.isDirectory()) {
        if (IGNORED_DIRS.has(entry.name)) return [];
        return walkDir(fullPath); // recurse
      }

      const ext = path.extname(entry.name).slice(1).toLowerCase();
      const isCodeFile =
        CODE_EXTENSIONS.has(ext) ||
        ext === '' || // e.g. Dockerfile, Makefile
        /^(dockerfile|makefile|readme)/i.test(entry.name);

      return isCodeFile ? [fullPath] : [];
    });
  } catch (error) {
    console.error(`Error reading directory ${dir}:`, error);
    return [];
  }
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    minWidth: 600,
    minHeight: 400,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow();

  // IPC handlers
  ipcMain.handle('dialog:openFiles', async (): Promise<string[]> => {
    const { canceled, filePaths } = await dialog.showOpenDialog({
      properties: ['openFile', 'openDirectory', 'multiSelections'],
      filters: [
        {
          name: 'Code Files',
          extensions: [
            // Web Development
            'js', 'jsx', 'ts', 'tsx', 'html', 'htm', 'css', 'scss', 'sass', 'less',
            'vue', 'svelte', 'astro', 'json', 'xml', 'yaml', 'yml', 'toml',
            // Programming Languages
            'py', 'pyx', 'pyi', 'pyw', 'java', 'kt', 'kts', 'scala', 'groovy',
            'c', 'cpp', 'cc', 'cxx', 'h', 'hpp', 'hxx', 'cs', 'vb', 'fs', 'fsx',
            'go', 'rs', 'swift', 'rb', 'php', 'pl', 'pm', 'r', 'R', 'jl',
            'dart', 'elm', 'hs', 'lhs', 'ml', 'mli', 'f', 'f90', 'f95',
            // Shell & Config
            'sh', 'bash', 'zsh', 'fish', 'bat', 'cmd', 'ps1', 'psm1',
            'dockerfile', 'makefile', 'mk', 'cmake', 'gradle', 'build',
            'env', 'ini', 'conf', 'config', 'properties', 'cfg',
            // Documentation & Markup
            'md', 'markdown', 'mdx', 'rst', 'adoc', 'asciidoc', 'tex', 'txt',
            // Database & Query
            'sql', 'nosql', 'cypher', 'sparql', 'graphql', 'gql',
            // Other
            'lock', 'gitignore', 'gitattributes', 'editorconfig', 'eslintrc',
            'prettierrc', 'babelrc', 'tsconfig', 'jsconfig', 'webpack'
          ]
        },
        {
          name: 'All Files',
          extensions: ['*']
        }
      ]
    });
    if (canceled) return [];

    const allFiles = filePaths.flatMap((p) =>
      fs.statSync(p).isDirectory() ? walkDir(p) : [p]
    );

    // de-dupe & make sure they still exist
    return Array.from(getUniqueExistingFiles(allFiles));
  });

  // Handler to generate combined content and count tokens
  ipcMain.handle('files:generatePreview', async (_e, filePaths: string[], dragDropFiles: Array<{ name: string, content: string }> = []): Promise<FilePreviewResult> => {
    const uniqueFiles = getUniqueExistingFiles(filePaths);

    let output = 'Files combined:\n';

    // Add the list of file routes at the top
    uniqueFiles.forEach((file) => {
      output += `- ${file}\n`;
    });

    // Add drag-and-drop files to the list
    dragDropFiles.forEach((fileData) => {
      output += `- ${fileData.name}\n`;
    });

    output += '\n'; // Add a blank line after the file list

    // Add the actual content using template literals consistently
    uniqueFiles.forEach((file) => {
      const ext = path.extname(file).slice(1);
      const content = fs.readFileSync(file, 'utf-8');
      output += `${file}\n\`\`\`${ext}\n${content.trimEnd()}\n\`\`\`\n\n`;
    });

    // Add drag-and-drop files content
    dragDropFiles.forEach((fileData) => {
      const ext = path.extname(fileData.name).slice(1);
      output += `${fileData.name}\n\`\`\`${ext}\n${fileData.content.trimEnd()}\n\`\`\`\n\n`;
    });

    // Count tokens using tiktoken
    let tokenCount = 0;
    try {
      const encoding = encoding_for_model('gpt-4');
      tokenCount = encoding.encode(output.trim()).length;
      encoding.free();
    } catch (error) {
      console.error('Error counting tokens:', error);
    }

    return {
      content: output.trim(),
      tokenCount,
      fileCount: uniqueFiles.size + dragDropFiles.length
    };
  });

  // Handler to calculate individual file token counts
  ipcMain.handle('files:getTokenCounts', async (_e, filePaths: string[], dragDropFiles: Array<{ name: string, content: string }> = []): Promise<Record<string, number>> => {
    const tokenCounts: Record<string, number> = {};

    try {
      const encoding = encoding_for_model('gpt-4');

      // Calculate token counts for selected files
      for (const filePath of filePaths) {
        if (fs.existsSync(filePath)) {
          try {
            const content = fs.readFileSync(filePath, 'utf-8');
            const ext = path.extname(filePath).slice(1);
            const formattedContent = `${filePath}\n\`\`\`${ext}\n${content.trimEnd()}\n\`\`\`\n\n`;
            tokenCounts[filePath] = encoding.encode(formattedContent).length;
          } catch (error) {
            console.error(`Error reading file ${filePath}:`, error);
            tokenCounts[filePath] = 0;
          }
        }
      }

      // Calculate token counts for drag-and-drop files
      for (const fileData of dragDropFiles) {
        const ext = path.extname(fileData.name).slice(1);
        const formattedContent = `${fileData.name}\n\`\`\`${ext}\n${fileData.content.trimEnd()}\n\`\`\`\n\n`;
        tokenCounts[fileData.name] = encoding.encode(formattedContent).length;
      }

      encoding.free();
    } catch (error) {
      console.error('Error counting tokens:', error);
    }

    return tokenCounts;
  });

  ipcMain.handle('files:combine', async (_e, content: string): Promise<CombineResult> => {
    const dest = path.join(app.getPath('desktop'), 'combined_output.txt');
    fs.writeFileSync(dest, content);
    clipboard.writeText(content);        // put on clipboard for quick paste
    return { dest };
  });

  // Handler to copy content to clipboard
  ipcMain.handle('clipboard:writeText', async (_e, text: string): Promise<boolean> => {
    clipboard.writeText(text);
    return true;
  });

  // Handler to get/set theme
  ipcMain.handle('theme:shouldUseDarkColors', () => {
    return nativeTheme.shouldUseDarkColors;
  });

  ipcMain.handle('theme:setTheme', (_e, theme: 'system' | 'light' | 'dark') => {
    nativeTheme.themeSource = theme;
    return nativeTheme.shouldUseDarkColors;
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
