import { app, BrowserWindow, dialog, ipcMain, clipboard } from 'electron';
import path from 'node:path';
import fs from 'node:fs';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow();

  // IPC handlers
  ipcMain.handle('dialog:openFiles', async () => {
    const { canceled, filePaths } = await dialog.showOpenDialog({
      properties: ['openFile', 'multiSelections'],
    });
    return canceled ? [] : filePaths;
  });

  // New handler for single file selection
  ipcMain.handle('dialog:addFile', async () => {
    const { canceled, filePaths } = await dialog.showOpenDialog({
      properties: ['openFile'],
    });
    return canceled ? null : filePaths[0];
  });

  ipcMain.handle('files:combine', async (_e, filePaths: string[]) => {
    const uniqueFiles = new Set(
      filePaths
        .map((file) => file.trim())
        .filter(Boolean)
        .filter((file) => fs.existsSync(file))
    );

    let output = 'Files combined:\n';

    // Add the list of file routes at the top
    uniqueFiles.forEach((file) => {
      output += `- ${file}\n`;
    });

    output += '\n'; // Add a blank line after the file list

    // Add the actual content
    uniqueFiles.forEach((file) => {
      const ext = path.extname(file).slice(1);
      const content = fs.readFileSync(file, 'utf-8');
      output += `${file}\n\`\`\`${ext}\n${content.trimEnd()}\n\`\`\`\n\n`;
    });

    const dest = path.join(app.getPath('desktop'), 'combined_output.txt');
    fs.writeFileSync(dest, output.trim());
    clipboard.writeText(output.trim());        // put on clipboard for quick paste
    return { dest, combined: output };
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
